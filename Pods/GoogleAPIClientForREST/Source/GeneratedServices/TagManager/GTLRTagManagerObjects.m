// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Tag Manager API (tagmanager/v1)
// Description:
//   Accesses Tag Manager accounts and containers.
// Documentation:
//   https://developers.google.com/tag-manager/api/v1/

#import "GTLRTagManagerObjects.h"

// ----------------------------------------------------------------------------
// Constants

// GTLRTagManager_AccountAccess.permission
NSString * const kGTLRTagManager_AccountAccess_Permission_Delete = @"delete";
NSString * const kGTLRTagManager_AccountAccess_Permission_Edit = @"edit";
NSString * const kGTLRTagManager_AccountAccess_Permission_Manage = @"manage";
NSString * const kGTLRTagManager_AccountAccess_Permission_Publish = @"publish";
NSString * const kGTLRTagManager_AccountAccess_Permission_Read = @"read";

// GTLRTagManager_Condition.type
NSString * const kGTLRTagManager_Condition_Type_Contains       = @"contains";
NSString * const kGTLRTagManager_Condition_Type_CssSelector    = @"cssSelector";
NSString * const kGTLRTagManager_Condition_Type_EndsWith       = @"endsWith";
NSString * const kGTLRTagManager_Condition_Type_Equals         = @"equals";
NSString * const kGTLRTagManager_Condition_Type_Greater        = @"greater";
NSString * const kGTLRTagManager_Condition_Type_GreaterOrEquals = @"greaterOrEquals";
NSString * const kGTLRTagManager_Condition_Type_Less           = @"less";
NSString * const kGTLRTagManager_Condition_Type_LessOrEquals   = @"lessOrEquals";
NSString * const kGTLRTagManager_Condition_Type_MatchRegex     = @"matchRegex";
NSString * const kGTLRTagManager_Condition_Type_StartsWith     = @"startsWith";
NSString * const kGTLRTagManager_Condition_Type_UrlMatches     = @"urlMatches";

// GTLRTagManager_Container.enabledBuiltInVariable
NSString * const kGTLRTagManager_Container_EnabledBuiltInVariable_AdvertiserId = @"advertiserId";
NSString * const kGTLRTagManager_Container_EnabledBuiltInVariable_AdvertisingTrackingEnabled = @"advertisingTrackingEnabled";
NSString * const kGTLRTagManager_Container_EnabledBuiltInVariable_AppId = @"appId";
NSString * const kGTLRTagManager_Container_EnabledBuiltInVariable_AppName = @"appName";
NSString * const kGTLRTagManager_Container_EnabledBuiltInVariable_AppVersionCode = @"appVersionCode";
NSString * const kGTLRTagManager_Container_EnabledBuiltInVariable_AppVersionName = @"appVersionName";
NSString * const kGTLRTagManager_Container_EnabledBuiltInVariable_ClickClasses = @"clickClasses";
NSString * const kGTLRTagManager_Container_EnabledBuiltInVariable_ClickElement = @"clickElement";
NSString * const kGTLRTagManager_Container_EnabledBuiltInVariable_ClickId = @"clickId";
NSString * const kGTLRTagManager_Container_EnabledBuiltInVariable_ClickTarget = @"clickTarget";
NSString * const kGTLRTagManager_Container_EnabledBuiltInVariable_ClickText = @"clickText";
NSString * const kGTLRTagManager_Container_EnabledBuiltInVariable_ClickUrl = @"clickUrl";
NSString * const kGTLRTagManager_Container_EnabledBuiltInVariable_ContainerId = @"containerId";
NSString * const kGTLRTagManager_Container_EnabledBuiltInVariable_ContainerVersion = @"containerVersion";
NSString * const kGTLRTagManager_Container_EnabledBuiltInVariable_DebugMode = @"debugMode";
NSString * const kGTLRTagManager_Container_EnabledBuiltInVariable_DeviceName = @"deviceName";
NSString * const kGTLRTagManager_Container_EnabledBuiltInVariable_EnvironmentName = @"environmentName";
NSString * const kGTLRTagManager_Container_EnabledBuiltInVariable_ErrorLine = @"errorLine";
NSString * const kGTLRTagManager_Container_EnabledBuiltInVariable_ErrorMessage = @"errorMessage";
NSString * const kGTLRTagManager_Container_EnabledBuiltInVariable_ErrorUrl = @"errorUrl";
NSString * const kGTLRTagManager_Container_EnabledBuiltInVariable_Event = @"event";
NSString * const kGTLRTagManager_Container_EnabledBuiltInVariable_FormClasses = @"formClasses";
NSString * const kGTLRTagManager_Container_EnabledBuiltInVariable_FormElement = @"formElement";
NSString * const kGTLRTagManager_Container_EnabledBuiltInVariable_FormId = @"formId";
NSString * const kGTLRTagManager_Container_EnabledBuiltInVariable_FormTarget = @"formTarget";
NSString * const kGTLRTagManager_Container_EnabledBuiltInVariable_FormText = @"formText";
NSString * const kGTLRTagManager_Container_EnabledBuiltInVariable_FormUrl = @"formUrl";
NSString * const kGTLRTagManager_Container_EnabledBuiltInVariable_HistorySource = @"historySource";
NSString * const kGTLRTagManager_Container_EnabledBuiltInVariable_HtmlId = @"htmlId";
NSString * const kGTLRTagManager_Container_EnabledBuiltInVariable_Language = @"language";
NSString * const kGTLRTagManager_Container_EnabledBuiltInVariable_NewHistoryFragment = @"newHistoryFragment";
NSString * const kGTLRTagManager_Container_EnabledBuiltInVariable_NewHistoryState = @"newHistoryState";
NSString * const kGTLRTagManager_Container_EnabledBuiltInVariable_OldHistoryFragment = @"oldHistoryFragment";
NSString * const kGTLRTagManager_Container_EnabledBuiltInVariable_OldHistoryState = @"oldHistoryState";
NSString * const kGTLRTagManager_Container_EnabledBuiltInVariable_OsVersion = @"osVersion";
NSString * const kGTLRTagManager_Container_EnabledBuiltInVariable_PageHostname = @"pageHostname";
NSString * const kGTLRTagManager_Container_EnabledBuiltInVariable_PagePath = @"pagePath";
NSString * const kGTLRTagManager_Container_EnabledBuiltInVariable_PageUrl = @"pageUrl";
NSString * const kGTLRTagManager_Container_EnabledBuiltInVariable_Platform = @"platform";
NSString * const kGTLRTagManager_Container_EnabledBuiltInVariable_RandomNumber = @"randomNumber";
NSString * const kGTLRTagManager_Container_EnabledBuiltInVariable_Referrer = @"referrer";
NSString * const kGTLRTagManager_Container_EnabledBuiltInVariable_Resolution = @"resolution";
NSString * const kGTLRTagManager_Container_EnabledBuiltInVariable_SdkVersion = @"sdkVersion";

// GTLRTagManager_Container.usageContext
NSString * const kGTLRTagManager_Container_UsageContext_Android = @"android";
NSString * const kGTLRTagManager_Container_UsageContext_AndroidSdk5 = @"androidSdk5";
NSString * const kGTLRTagManager_Container_UsageContext_Ios    = @"ios";
NSString * const kGTLRTagManager_Container_UsageContext_IosSdk5 = @"iosSdk5";
NSString * const kGTLRTagManager_Container_UsageContext_Web    = @"web";

// GTLRTagManager_ContainerAccess.permission
NSString * const kGTLRTagManager_ContainerAccess_Permission_Delete = @"delete";
NSString * const kGTLRTagManager_ContainerAccess_Permission_Edit = @"edit";
NSString * const kGTLRTagManager_ContainerAccess_Permission_Manage = @"manage";
NSString * const kGTLRTagManager_ContainerAccess_Permission_Publish = @"publish";
NSString * const kGTLRTagManager_ContainerAccess_Permission_Read = @"read";

// GTLRTagManager_Environment.type
NSString * const kGTLRTagManager_Environment_Type_Draft  = @"draft";
NSString * const kGTLRTagManager_Environment_Type_Latest = @"latest";
NSString * const kGTLRTagManager_Environment_Type_Live   = @"live";
NSString * const kGTLRTagManager_Environment_Type_User   = @"user";

// GTLRTagManager_Parameter.type
NSString * const kGTLRTagManager_Parameter_Type_Boolean  = @"boolean";
NSString * const kGTLRTagManager_Parameter_Type_Integer  = @"integer";
NSString * const kGTLRTagManager_Parameter_Type_List     = @"list";
NSString * const kGTLRTagManager_Parameter_Type_Map      = @"map";
NSString * const kGTLRTagManager_Parameter_Type_Template = @"template";

// GTLRTagManager_Tag.tagFiringOption
NSString * const kGTLRTagManager_Tag_TagFiringOption_OncePerEvent = @"oncePerEvent";
NSString * const kGTLRTagManager_Tag_TagFiringOption_OncePerLoad = @"oncePerLoad";
NSString * const kGTLRTagManager_Tag_TagFiringOption_Unlimited = @"unlimited";

// GTLRTagManager_Trigger.type
NSString * const kGTLRTagManager_Trigger_Type_AjaxSubmission = @"ajaxSubmission";
NSString * const kGTLRTagManager_Trigger_Type_Always         = @"always";
NSString * const kGTLRTagManager_Trigger_Type_Click          = @"click";
NSString * const kGTLRTagManager_Trigger_Type_CustomEvent    = @"customEvent";
NSString * const kGTLRTagManager_Trigger_Type_DomReady       = @"domReady";
NSString * const kGTLRTagManager_Trigger_Type_FormSubmission = @"formSubmission";
NSString * const kGTLRTagManager_Trigger_Type_HistoryChange  = @"historyChange";
NSString * const kGTLRTagManager_Trigger_Type_JsError        = @"jsError";
NSString * const kGTLRTagManager_Trigger_Type_LinkClick      = @"linkClick";
NSString * const kGTLRTagManager_Trigger_Type_Pageview       = @"pageview";
NSString * const kGTLRTagManager_Trigger_Type_Timer          = @"timer";
NSString * const kGTLRTagManager_Trigger_Type_WindowLoaded   = @"windowLoaded";
NSString * const kGTLRTagManager_Trigger_Type_YouTube        = @"youTube";

// ----------------------------------------------------------------------------
//
//   GTLRTagManager_Account
//

@implementation GTLRTagManager_Account
@dynamic accountId, fingerprint, name, shareData;
@end


// ----------------------------------------------------------------------------
//
//   GTLRTagManager_AccountAccess
//

@implementation GTLRTagManager_AccountAccess
@dynamic permission;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"permission" : [NSString class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRTagManager_Condition
//

@implementation GTLRTagManager_Condition
@dynamic parameter, type;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"parameter" : [GTLRTagManager_Parameter class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRTagManager_Container
//

@implementation GTLRTagManager_Container
@dynamic accountId, containerId, domainName, enabledBuiltInVariable,
         fingerprint, name, notes, publicId, timeZoneCountryId, timeZoneId,
         usageContext;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"domainName" : [NSString class],
    @"enabledBuiltInVariable" : [NSString class],
    @"usageContext" : [NSString class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRTagManager_ContainerAccess
//

@implementation GTLRTagManager_ContainerAccess
@dynamic containerId, permission;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"permission" : [NSString class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRTagManager_ContainerVersion
//

@implementation GTLRTagManager_ContainerVersion
@dynamic accountId, container, containerId, containerVersionId, deleted,
         fingerprint, folder, macro, name, notes, rule, tag, trigger, variable;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"folder" : [GTLRTagManager_Folder class],
    @"macro" : [GTLRTagManager_Macro class],
    @"rule" : [GTLRTagManager_Rule class],
    @"tag" : [GTLRTagManager_Tag class],
    @"trigger" : [GTLRTagManager_Trigger class],
    @"variable" : [GTLRTagManager_Variable class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRTagManager_ContainerVersionHeader
//

@implementation GTLRTagManager_ContainerVersionHeader
@dynamic accountId, containerId, containerVersionId, deleted, name, numMacros,
         numRules, numTags, numTriggers, numVariables;
@end


// ----------------------------------------------------------------------------
//
//   GTLRTagManager_CreateContainerVersionRequestVersionOptions
//

@implementation GTLRTagManager_CreateContainerVersionRequestVersionOptions
@dynamic name, notes, quickPreview;
@end


// ----------------------------------------------------------------------------
//
//   GTLRTagManager_CreateContainerVersionResponse
//

@implementation GTLRTagManager_CreateContainerVersionResponse
@dynamic compilerError, containerVersion;
@end


// ----------------------------------------------------------------------------
//
//   GTLRTagManager_Environment
//

@implementation GTLRTagManager_Environment
@dynamic accountId, authorizationCode, authorizationTimestampMs, containerId,
         containerVersionId, descriptionProperty, enableDebug, environmentId,
         fingerprint, name, type, url;

+ (NSDictionary<NSString *, NSString *> *)propertyToJSONKeyMap {
  return @{ @"descriptionProperty" : @"description" };
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRTagManager_Folder
//

@implementation GTLRTagManager_Folder
@dynamic accountId, containerId, fingerprint, folderId, name;
@end


// ----------------------------------------------------------------------------
//
//   GTLRTagManager_FolderEntities
//

@implementation GTLRTagManager_FolderEntities
@dynamic tag, trigger, variable;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"tag" : [GTLRTagManager_Tag class],
    @"trigger" : [GTLRTagManager_Trigger class],
    @"variable" : [GTLRTagManager_Variable class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRTagManager_ListAccountsResponse
//

@implementation GTLRTagManager_ListAccountsResponse
@dynamic accounts;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"accounts" : [GTLRTagManager_Account class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRTagManager_ListAccountUsersResponse
//

@implementation GTLRTagManager_ListAccountUsersResponse
@dynamic userAccess;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"userAccess" : [GTLRTagManager_UserAccess class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRTagManager_ListContainersResponse
//

@implementation GTLRTagManager_ListContainersResponse
@dynamic containers;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"containers" : [GTLRTagManager_Container class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRTagManager_ListContainerVersionsResponse
//

@implementation GTLRTagManager_ListContainerVersionsResponse
@dynamic containerVersion, containerVersionHeader;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"containerVersion" : [GTLRTagManager_ContainerVersion class],
    @"containerVersionHeader" : [GTLRTagManager_ContainerVersionHeader class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRTagManager_ListEnvironmentsResponse
//

@implementation GTLRTagManager_ListEnvironmentsResponse
@dynamic environments;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"environments" : [GTLRTagManager_Environment class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRTagManager_ListFoldersResponse
//

@implementation GTLRTagManager_ListFoldersResponse
@dynamic folders;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"folders" : [GTLRTagManager_Folder class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRTagManager_ListTagsResponse
//

@implementation GTLRTagManager_ListTagsResponse
@dynamic tags;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"tags" : [GTLRTagManager_Tag class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRTagManager_ListTriggersResponse
//

@implementation GTLRTagManager_ListTriggersResponse
@dynamic triggers;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"triggers" : [GTLRTagManager_Trigger class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRTagManager_ListVariablesResponse
//

@implementation GTLRTagManager_ListVariablesResponse
@dynamic variables;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"variables" : [GTLRTagManager_Variable class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRTagManager_Macro
//

@implementation GTLRTagManager_Macro
@dynamic accountId, containerId, disablingRuleId, enablingRuleId, fingerprint,
         macroId, name, notes, parameter, parentFolderId, scheduleEndMs,
         scheduleStartMs, type;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"disablingRuleId" : [NSString class],
    @"enablingRuleId" : [NSString class],
    @"parameter" : [GTLRTagManager_Parameter class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRTagManager_Parameter
//

@implementation GTLRTagManager_Parameter
@dynamic key, list, map, type, value;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"list" : [GTLRTagManager_Parameter class],
    @"map" : [GTLRTagManager_Parameter class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRTagManager_PublishContainerVersionResponse
//

@implementation GTLRTagManager_PublishContainerVersionResponse
@dynamic compilerError, containerVersion;
@end


// ----------------------------------------------------------------------------
//
//   GTLRTagManager_Rule
//

@implementation GTLRTagManager_Rule
@dynamic accountId, condition, containerId, fingerprint, name, notes, ruleId;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"condition" : [GTLRTagManager_Condition class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRTagManager_SetupTag
//

@implementation GTLRTagManager_SetupTag
@dynamic stopOnSetupFailure, tagName;
@end


// ----------------------------------------------------------------------------
//
//   GTLRTagManager_Tag
//

@implementation GTLRTagManager_Tag
@dynamic accountId, blockingRuleId, blockingTriggerId, containerId, fingerprint,
         firingRuleId, firingTriggerId, liveOnly, name, notes, parameter,
         parentFolderId, priority, scheduleEndMs, scheduleStartMs, setupTag,
         tagFiringOption, tagId, teardownTag, type;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"blockingRuleId" : [NSString class],
    @"blockingTriggerId" : [NSString class],
    @"firingRuleId" : [NSString class],
    @"firingTriggerId" : [NSString class],
    @"parameter" : [GTLRTagManager_Parameter class],
    @"setupTag" : [GTLRTagManager_SetupTag class],
    @"teardownTag" : [GTLRTagManager_TeardownTag class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRTagManager_TeardownTag
//

@implementation GTLRTagManager_TeardownTag
@dynamic stopTeardownOnFailure, tagName;
@end


// ----------------------------------------------------------------------------
//
//   GTLRTagManager_Trigger
//

@implementation GTLRTagManager_Trigger
@dynamic accountId, autoEventFilter, checkValidation, containerId,
         customEventFilter, enableAllVideos, eventName, filter, fingerprint,
         interval, limit, name, parentFolderId, triggerId, type,
         uniqueTriggerId, videoPercentageList, waitForTags, waitForTagsTimeout;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"autoEventFilter" : [GTLRTagManager_Condition class],
    @"customEventFilter" : [GTLRTagManager_Condition class],
    @"filter" : [GTLRTagManager_Condition class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRTagManager_UserAccess
//

@implementation GTLRTagManager_UserAccess
@dynamic accountAccess, accountId, containerAccess, emailAddress, permissionId;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"containerAccess" : [GTLRTagManager_ContainerAccess class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRTagManager_Variable
//

@implementation GTLRTagManager_Variable
@dynamic accountId, containerId, disablingTriggerId, enablingTriggerId,
         fingerprint, name, notes, parameter, parentFolderId, scheduleEndMs,
         scheduleStartMs, type, variableId;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"disablingTriggerId" : [NSString class],
    @"enablingTriggerId" : [NSString class],
    @"parameter" : [GTLRTagManager_Parameter class]
  };
  return map;
}

@end
