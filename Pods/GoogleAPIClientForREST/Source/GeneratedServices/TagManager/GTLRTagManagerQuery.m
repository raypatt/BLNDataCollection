// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Tag Manager API (tagmanager/v1)
// Description:
//   Accesses Tag Manager accounts and containers.
// Documentation:
//   https://developers.google.com/tag-manager/api/v1/

#import "GTLRTagManagerQuery.h"

#import "GTLRTagManagerObjects.h"

@implementation GTLRTagManagerQuery

@dynamic fields;

@end

@implementation GTLRTagManagerQuery_AccountsContainersCreate

@dynamic accountId;

+ (instancetype)queryWithObject:(GTLRTagManager_Container *)object
                      accountId:(NSString *)accountId {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[ @"accountId" ];
  NSString *pathURITemplate = @"accounts/{accountId}/containers";
  GTLRTagManagerQuery_AccountsContainersCreate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.accountId = accountId;
  query.expectedObjectClass = [GTLRTagManager_Container class];
  query.loggingName = @"tagmanager.accounts.containers.create";
  return query;
}

@end

@implementation GTLRTagManagerQuery_AccountsContainersDelete

@dynamic accountId, containerId;

+ (instancetype)queryWithAccountId:(NSString *)accountId
                       containerId:(NSString *)containerId {
  NSArray *pathParams = @[
    @"accountId", @"containerId"
  ];
  NSString *pathURITemplate = @"accounts/{accountId}/containers/{containerId}";
  GTLRTagManagerQuery_AccountsContainersDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.accountId = accountId;
  query.containerId = containerId;
  query.loggingName = @"tagmanager.accounts.containers.delete";
  return query;
}

@end

@implementation GTLRTagManagerQuery_AccountsContainersEnvironmentsCreate

@dynamic accountId, containerId;

+ (instancetype)queryWithObject:(GTLRTagManager_Environment *)object
                      accountId:(NSString *)accountId
                    containerId:(NSString *)containerId {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[
    @"accountId", @"containerId"
  ];
  NSString *pathURITemplate = @"accounts/{accountId}/containers/{containerId}/environments";
  GTLRTagManagerQuery_AccountsContainersEnvironmentsCreate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.accountId = accountId;
  query.containerId = containerId;
  query.expectedObjectClass = [GTLRTagManager_Environment class];
  query.loggingName = @"tagmanager.accounts.containers.environments.create";
  return query;
}

@end

@implementation GTLRTagManagerQuery_AccountsContainersEnvironmentsDelete

@dynamic accountId, containerId, environmentId;

+ (instancetype)queryWithAccountId:(NSString *)accountId
                       containerId:(NSString *)containerId
                     environmentId:(NSString *)environmentId {
  NSArray *pathParams = @[
    @"accountId", @"containerId", @"environmentId"
  ];
  NSString *pathURITemplate = @"accounts/{accountId}/containers/{containerId}/environments/{environmentId}";
  GTLRTagManagerQuery_AccountsContainersEnvironmentsDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.accountId = accountId;
  query.containerId = containerId;
  query.environmentId = environmentId;
  query.loggingName = @"tagmanager.accounts.containers.environments.delete";
  return query;
}

@end

@implementation GTLRTagManagerQuery_AccountsContainersEnvironmentsGet

@dynamic accountId, containerId, environmentId;

+ (instancetype)queryWithAccountId:(NSString *)accountId
                       containerId:(NSString *)containerId
                     environmentId:(NSString *)environmentId {
  NSArray *pathParams = @[
    @"accountId", @"containerId", @"environmentId"
  ];
  NSString *pathURITemplate = @"accounts/{accountId}/containers/{containerId}/environments/{environmentId}";
  GTLRTagManagerQuery_AccountsContainersEnvironmentsGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.accountId = accountId;
  query.containerId = containerId;
  query.environmentId = environmentId;
  query.expectedObjectClass = [GTLRTagManager_Environment class];
  query.loggingName = @"tagmanager.accounts.containers.environments.get";
  return query;
}

@end

@implementation GTLRTagManagerQuery_AccountsContainersEnvironmentsList

@dynamic accountId, containerId;

+ (instancetype)queryWithAccountId:(NSString *)accountId
                       containerId:(NSString *)containerId {
  NSArray *pathParams = @[
    @"accountId", @"containerId"
  ];
  NSString *pathURITemplate = @"accounts/{accountId}/containers/{containerId}/environments";
  GTLRTagManagerQuery_AccountsContainersEnvironmentsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.accountId = accountId;
  query.containerId = containerId;
  query.expectedObjectClass = [GTLRTagManager_ListEnvironmentsResponse class];
  query.loggingName = @"tagmanager.accounts.containers.environments.list";
  return query;
}

@end

@implementation GTLRTagManagerQuery_AccountsContainersEnvironmentsPatch

@dynamic accountId, containerId, environmentId, fingerprint;

+ (instancetype)queryWithObject:(GTLRTagManager_Environment *)object
                      accountId:(NSString *)accountId
                    containerId:(NSString *)containerId
                  environmentId:(NSString *)environmentId {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[
    @"accountId", @"containerId", @"environmentId"
  ];
  NSString *pathURITemplate = @"accounts/{accountId}/containers/{containerId}/environments/{environmentId}";
  GTLRTagManagerQuery_AccountsContainersEnvironmentsPatch *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PATCH"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.accountId = accountId;
  query.containerId = containerId;
  query.environmentId = environmentId;
  query.expectedObjectClass = [GTLRTagManager_Environment class];
  query.loggingName = @"tagmanager.accounts.containers.environments.patch";
  return query;
}

@end

@implementation GTLRTagManagerQuery_AccountsContainersEnvironmentsUpdate

@dynamic accountId, containerId, environmentId, fingerprint;

+ (instancetype)queryWithObject:(GTLRTagManager_Environment *)object
                      accountId:(NSString *)accountId
                    containerId:(NSString *)containerId
                  environmentId:(NSString *)environmentId {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[
    @"accountId", @"containerId", @"environmentId"
  ];
  NSString *pathURITemplate = @"accounts/{accountId}/containers/{containerId}/environments/{environmentId}";
  GTLRTagManagerQuery_AccountsContainersEnvironmentsUpdate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PUT"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.accountId = accountId;
  query.containerId = containerId;
  query.environmentId = environmentId;
  query.expectedObjectClass = [GTLRTagManager_Environment class];
  query.loggingName = @"tagmanager.accounts.containers.environments.update";
  return query;
}

@end

@implementation GTLRTagManagerQuery_AccountsContainersFoldersCreate

@dynamic accountId, containerId;

+ (instancetype)queryWithObject:(GTLRTagManager_Folder *)object
                      accountId:(NSString *)accountId
                    containerId:(NSString *)containerId {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[
    @"accountId", @"containerId"
  ];
  NSString *pathURITemplate = @"accounts/{accountId}/containers/{containerId}/folders";
  GTLRTagManagerQuery_AccountsContainersFoldersCreate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.accountId = accountId;
  query.containerId = containerId;
  query.expectedObjectClass = [GTLRTagManager_Folder class];
  query.loggingName = @"tagmanager.accounts.containers.folders.create";
  return query;
}

@end

@implementation GTLRTagManagerQuery_AccountsContainersFoldersDelete

@dynamic accountId, containerId, folderId;

+ (instancetype)queryWithAccountId:(NSString *)accountId
                       containerId:(NSString *)containerId
                          folderId:(NSString *)folderId {
  NSArray *pathParams = @[
    @"accountId", @"containerId", @"folderId"
  ];
  NSString *pathURITemplate = @"accounts/{accountId}/containers/{containerId}/folders/{folderId}";
  GTLRTagManagerQuery_AccountsContainersFoldersDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.accountId = accountId;
  query.containerId = containerId;
  query.folderId = folderId;
  query.loggingName = @"tagmanager.accounts.containers.folders.delete";
  return query;
}

@end

@implementation GTLRTagManagerQuery_AccountsContainersFoldersEntitiesList

@dynamic accountId, containerId, folderId;

+ (instancetype)queryWithAccountId:(NSString *)accountId
                       containerId:(NSString *)containerId
                          folderId:(NSString *)folderId {
  NSArray *pathParams = @[
    @"accountId", @"containerId", @"folderId"
  ];
  NSString *pathURITemplate = @"accounts/{accountId}/containers/{containerId}/folders/{folderId}/entities";
  GTLRTagManagerQuery_AccountsContainersFoldersEntitiesList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.accountId = accountId;
  query.containerId = containerId;
  query.folderId = folderId;
  query.expectedObjectClass = [GTLRTagManager_FolderEntities class];
  query.loggingName = @"tagmanager.accounts.containers.folders.entities.list";
  return query;
}

@end

@implementation GTLRTagManagerQuery_AccountsContainersFoldersGet

@dynamic accountId, containerId, folderId;

+ (instancetype)queryWithAccountId:(NSString *)accountId
                       containerId:(NSString *)containerId
                          folderId:(NSString *)folderId {
  NSArray *pathParams = @[
    @"accountId", @"containerId", @"folderId"
  ];
  NSString *pathURITemplate = @"accounts/{accountId}/containers/{containerId}/folders/{folderId}";
  GTLRTagManagerQuery_AccountsContainersFoldersGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.accountId = accountId;
  query.containerId = containerId;
  query.folderId = folderId;
  query.expectedObjectClass = [GTLRTagManager_Folder class];
  query.loggingName = @"tagmanager.accounts.containers.folders.get";
  return query;
}

@end

@implementation GTLRTagManagerQuery_AccountsContainersFoldersList

@dynamic accountId, containerId;

+ (instancetype)queryWithAccountId:(NSString *)accountId
                       containerId:(NSString *)containerId {
  NSArray *pathParams = @[
    @"accountId", @"containerId"
  ];
  NSString *pathURITemplate = @"accounts/{accountId}/containers/{containerId}/folders";
  GTLRTagManagerQuery_AccountsContainersFoldersList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.accountId = accountId;
  query.containerId = containerId;
  query.expectedObjectClass = [GTLRTagManager_ListFoldersResponse class];
  query.loggingName = @"tagmanager.accounts.containers.folders.list";
  return query;
}

@end

@implementation GTLRTagManagerQuery_AccountsContainersFoldersUpdate

@dynamic accountId, containerId, fingerprint, folderId;

+ (instancetype)queryWithObject:(GTLRTagManager_Folder *)object
                      accountId:(NSString *)accountId
                    containerId:(NSString *)containerId
                       folderId:(NSString *)folderId {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[
    @"accountId", @"containerId", @"folderId"
  ];
  NSString *pathURITemplate = @"accounts/{accountId}/containers/{containerId}/folders/{folderId}";
  GTLRTagManagerQuery_AccountsContainersFoldersUpdate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PUT"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.accountId = accountId;
  query.containerId = containerId;
  query.folderId = folderId;
  query.expectedObjectClass = [GTLRTagManager_Folder class];
  query.loggingName = @"tagmanager.accounts.containers.folders.update";
  return query;
}

@end

@implementation GTLRTagManagerQuery_AccountsContainersGet

@dynamic accountId, containerId;

+ (instancetype)queryWithAccountId:(NSString *)accountId
                       containerId:(NSString *)containerId {
  NSArray *pathParams = @[
    @"accountId", @"containerId"
  ];
  NSString *pathURITemplate = @"accounts/{accountId}/containers/{containerId}";
  GTLRTagManagerQuery_AccountsContainersGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.accountId = accountId;
  query.containerId = containerId;
  query.expectedObjectClass = [GTLRTagManager_Container class];
  query.loggingName = @"tagmanager.accounts.containers.get";
  return query;
}

@end

@implementation GTLRTagManagerQuery_AccountsContainersList

@dynamic accountId;

+ (instancetype)queryWithAccountId:(NSString *)accountId {
  NSArray *pathParams = @[ @"accountId" ];
  NSString *pathURITemplate = @"accounts/{accountId}/containers";
  GTLRTagManagerQuery_AccountsContainersList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.accountId = accountId;
  query.expectedObjectClass = [GTLRTagManager_ListContainersResponse class];
  query.loggingName = @"tagmanager.accounts.containers.list";
  return query;
}

@end

@implementation GTLRTagManagerQuery_AccountsContainersMoveFoldersUpdate

@dynamic accountId, containerId, folderId, tagId, triggerId, variableId;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"tagId" : [NSString class],
    @"triggerId" : [NSString class],
    @"variableId" : [NSString class]
  };
  return map;
}

+ (instancetype)queryWithObject:(GTLRTagManager_Folder *)object
                      accountId:(NSString *)accountId
                    containerId:(NSString *)containerId
                       folderId:(NSString *)folderId {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[
    @"accountId", @"containerId", @"folderId"
  ];
  NSString *pathURITemplate = @"accounts/{accountId}/containers/{containerId}/move_folders/{folderId}";
  GTLRTagManagerQuery_AccountsContainersMoveFoldersUpdate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PUT"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.accountId = accountId;
  query.containerId = containerId;
  query.folderId = folderId;
  query.loggingName = @"tagmanager.accounts.containers.move_folders.update";
  return query;
}

@end

@implementation GTLRTagManagerQuery_AccountsContainersReauthorizeEnvironmentsUpdate

@dynamic accountId, containerId, environmentId;

+ (instancetype)queryWithObject:(GTLRTagManager_Environment *)object
                      accountId:(NSString *)accountId
                    containerId:(NSString *)containerId
                  environmentId:(NSString *)environmentId {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[
    @"accountId", @"containerId", @"environmentId"
  ];
  NSString *pathURITemplate = @"accounts/{accountId}/containers/{containerId}/reauthorize_environments/{environmentId}";
  GTLRTagManagerQuery_AccountsContainersReauthorizeEnvironmentsUpdate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PUT"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.accountId = accountId;
  query.containerId = containerId;
  query.environmentId = environmentId;
  query.expectedObjectClass = [GTLRTagManager_Environment class];
  query.loggingName = @"tagmanager.accounts.containers.reauthorize_environments.update";
  return query;
}

@end

@implementation GTLRTagManagerQuery_AccountsContainersTagsCreate

@dynamic accountId, containerId;

+ (instancetype)queryWithObject:(GTLRTagManager_Tag *)object
                      accountId:(NSString *)accountId
                    containerId:(NSString *)containerId {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[
    @"accountId", @"containerId"
  ];
  NSString *pathURITemplate = @"accounts/{accountId}/containers/{containerId}/tags";
  GTLRTagManagerQuery_AccountsContainersTagsCreate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.accountId = accountId;
  query.containerId = containerId;
  query.expectedObjectClass = [GTLRTagManager_Tag class];
  query.loggingName = @"tagmanager.accounts.containers.tags.create";
  return query;
}

@end

@implementation GTLRTagManagerQuery_AccountsContainersTagsDelete

@dynamic accountId, containerId, tagId;

+ (instancetype)queryWithAccountId:(NSString *)accountId
                       containerId:(NSString *)containerId
                             tagId:(NSString *)tagId {
  NSArray *pathParams = @[
    @"accountId", @"containerId", @"tagId"
  ];
  NSString *pathURITemplate = @"accounts/{accountId}/containers/{containerId}/tags/{tagId}";
  GTLRTagManagerQuery_AccountsContainersTagsDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.accountId = accountId;
  query.containerId = containerId;
  query.tagId = tagId;
  query.loggingName = @"tagmanager.accounts.containers.tags.delete";
  return query;
}

@end

@implementation GTLRTagManagerQuery_AccountsContainersTagsGet

@dynamic accountId, containerId, tagId;

+ (instancetype)queryWithAccountId:(NSString *)accountId
                       containerId:(NSString *)containerId
                             tagId:(NSString *)tagId {
  NSArray *pathParams = @[
    @"accountId", @"containerId", @"tagId"
  ];
  NSString *pathURITemplate = @"accounts/{accountId}/containers/{containerId}/tags/{tagId}";
  GTLRTagManagerQuery_AccountsContainersTagsGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.accountId = accountId;
  query.containerId = containerId;
  query.tagId = tagId;
  query.expectedObjectClass = [GTLRTagManager_Tag class];
  query.loggingName = @"tagmanager.accounts.containers.tags.get";
  return query;
}

@end

@implementation GTLRTagManagerQuery_AccountsContainersTagsList

@dynamic accountId, containerId;

+ (instancetype)queryWithAccountId:(NSString *)accountId
                       containerId:(NSString *)containerId {
  NSArray *pathParams = @[
    @"accountId", @"containerId"
  ];
  NSString *pathURITemplate = @"accounts/{accountId}/containers/{containerId}/tags";
  GTLRTagManagerQuery_AccountsContainersTagsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.accountId = accountId;
  query.containerId = containerId;
  query.expectedObjectClass = [GTLRTagManager_ListTagsResponse class];
  query.loggingName = @"tagmanager.accounts.containers.tags.list";
  return query;
}

@end

@implementation GTLRTagManagerQuery_AccountsContainersTagsUpdate

@dynamic accountId, containerId, fingerprint, tagId;

+ (instancetype)queryWithObject:(GTLRTagManager_Tag *)object
                      accountId:(NSString *)accountId
                    containerId:(NSString *)containerId
                          tagId:(NSString *)tagId {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[
    @"accountId", @"containerId", @"tagId"
  ];
  NSString *pathURITemplate = @"accounts/{accountId}/containers/{containerId}/tags/{tagId}";
  GTLRTagManagerQuery_AccountsContainersTagsUpdate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PUT"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.accountId = accountId;
  query.containerId = containerId;
  query.tagId = tagId;
  query.expectedObjectClass = [GTLRTagManager_Tag class];
  query.loggingName = @"tagmanager.accounts.containers.tags.update";
  return query;
}

@end

@implementation GTLRTagManagerQuery_AccountsContainersTriggersCreate

@dynamic accountId, containerId;

+ (instancetype)queryWithObject:(GTLRTagManager_Trigger *)object
                      accountId:(NSString *)accountId
                    containerId:(NSString *)containerId {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[
    @"accountId", @"containerId"
  ];
  NSString *pathURITemplate = @"accounts/{accountId}/containers/{containerId}/triggers";
  GTLRTagManagerQuery_AccountsContainersTriggersCreate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.accountId = accountId;
  query.containerId = containerId;
  query.expectedObjectClass = [GTLRTagManager_Trigger class];
  query.loggingName = @"tagmanager.accounts.containers.triggers.create";
  return query;
}

@end

@implementation GTLRTagManagerQuery_AccountsContainersTriggersDelete

@dynamic accountId, containerId, triggerId;

+ (instancetype)queryWithAccountId:(NSString *)accountId
                       containerId:(NSString *)containerId
                         triggerId:(NSString *)triggerId {
  NSArray *pathParams = @[
    @"accountId", @"containerId", @"triggerId"
  ];
  NSString *pathURITemplate = @"accounts/{accountId}/containers/{containerId}/triggers/{triggerId}";
  GTLRTagManagerQuery_AccountsContainersTriggersDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.accountId = accountId;
  query.containerId = containerId;
  query.triggerId = triggerId;
  query.loggingName = @"tagmanager.accounts.containers.triggers.delete";
  return query;
}

@end

@implementation GTLRTagManagerQuery_AccountsContainersTriggersGet

@dynamic accountId, containerId, triggerId;

+ (instancetype)queryWithAccountId:(NSString *)accountId
                       containerId:(NSString *)containerId
                         triggerId:(NSString *)triggerId {
  NSArray *pathParams = @[
    @"accountId", @"containerId", @"triggerId"
  ];
  NSString *pathURITemplate = @"accounts/{accountId}/containers/{containerId}/triggers/{triggerId}";
  GTLRTagManagerQuery_AccountsContainersTriggersGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.accountId = accountId;
  query.containerId = containerId;
  query.triggerId = triggerId;
  query.expectedObjectClass = [GTLRTagManager_Trigger class];
  query.loggingName = @"tagmanager.accounts.containers.triggers.get";
  return query;
}

@end

@implementation GTLRTagManagerQuery_AccountsContainersTriggersList

@dynamic accountId, containerId;

+ (instancetype)queryWithAccountId:(NSString *)accountId
                       containerId:(NSString *)containerId {
  NSArray *pathParams = @[
    @"accountId", @"containerId"
  ];
  NSString *pathURITemplate = @"accounts/{accountId}/containers/{containerId}/triggers";
  GTLRTagManagerQuery_AccountsContainersTriggersList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.accountId = accountId;
  query.containerId = containerId;
  query.expectedObjectClass = [GTLRTagManager_ListTriggersResponse class];
  query.loggingName = @"tagmanager.accounts.containers.triggers.list";
  return query;
}

@end

@implementation GTLRTagManagerQuery_AccountsContainersTriggersUpdate

@dynamic accountId, containerId, fingerprint, triggerId;

+ (instancetype)queryWithObject:(GTLRTagManager_Trigger *)object
                      accountId:(NSString *)accountId
                    containerId:(NSString *)containerId
                      triggerId:(NSString *)triggerId {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[
    @"accountId", @"containerId", @"triggerId"
  ];
  NSString *pathURITemplate = @"accounts/{accountId}/containers/{containerId}/triggers/{triggerId}";
  GTLRTagManagerQuery_AccountsContainersTriggersUpdate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PUT"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.accountId = accountId;
  query.containerId = containerId;
  query.triggerId = triggerId;
  query.expectedObjectClass = [GTLRTagManager_Trigger class];
  query.loggingName = @"tagmanager.accounts.containers.triggers.update";
  return query;
}

@end

@implementation GTLRTagManagerQuery_AccountsContainersUpdate

@dynamic accountId, containerId, fingerprint;

+ (instancetype)queryWithObject:(GTLRTagManager_Container *)object
                      accountId:(NSString *)accountId
                    containerId:(NSString *)containerId {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[
    @"accountId", @"containerId"
  ];
  NSString *pathURITemplate = @"accounts/{accountId}/containers/{containerId}";
  GTLRTagManagerQuery_AccountsContainersUpdate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PUT"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.accountId = accountId;
  query.containerId = containerId;
  query.expectedObjectClass = [GTLRTagManager_Container class];
  query.loggingName = @"tagmanager.accounts.containers.update";
  return query;
}

@end

@implementation GTLRTagManagerQuery_AccountsContainersVariablesCreate

@dynamic accountId, containerId;

+ (instancetype)queryWithObject:(GTLRTagManager_Variable *)object
                      accountId:(NSString *)accountId
                    containerId:(NSString *)containerId {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[
    @"accountId", @"containerId"
  ];
  NSString *pathURITemplate = @"accounts/{accountId}/containers/{containerId}/variables";
  GTLRTagManagerQuery_AccountsContainersVariablesCreate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.accountId = accountId;
  query.containerId = containerId;
  query.expectedObjectClass = [GTLRTagManager_Variable class];
  query.loggingName = @"tagmanager.accounts.containers.variables.create";
  return query;
}

@end

@implementation GTLRTagManagerQuery_AccountsContainersVariablesDelete

@dynamic accountId, containerId, variableId;

+ (instancetype)queryWithAccountId:(NSString *)accountId
                       containerId:(NSString *)containerId
                        variableId:(NSString *)variableId {
  NSArray *pathParams = @[
    @"accountId", @"containerId", @"variableId"
  ];
  NSString *pathURITemplate = @"accounts/{accountId}/containers/{containerId}/variables/{variableId}";
  GTLRTagManagerQuery_AccountsContainersVariablesDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.accountId = accountId;
  query.containerId = containerId;
  query.variableId = variableId;
  query.loggingName = @"tagmanager.accounts.containers.variables.delete";
  return query;
}

@end

@implementation GTLRTagManagerQuery_AccountsContainersVariablesGet

@dynamic accountId, containerId, variableId;

+ (instancetype)queryWithAccountId:(NSString *)accountId
                       containerId:(NSString *)containerId
                        variableId:(NSString *)variableId {
  NSArray *pathParams = @[
    @"accountId", @"containerId", @"variableId"
  ];
  NSString *pathURITemplate = @"accounts/{accountId}/containers/{containerId}/variables/{variableId}";
  GTLRTagManagerQuery_AccountsContainersVariablesGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.accountId = accountId;
  query.containerId = containerId;
  query.variableId = variableId;
  query.expectedObjectClass = [GTLRTagManager_Variable class];
  query.loggingName = @"tagmanager.accounts.containers.variables.get";
  return query;
}

@end

@implementation GTLRTagManagerQuery_AccountsContainersVariablesList

@dynamic accountId, containerId;

+ (instancetype)queryWithAccountId:(NSString *)accountId
                       containerId:(NSString *)containerId {
  NSArray *pathParams = @[
    @"accountId", @"containerId"
  ];
  NSString *pathURITemplate = @"accounts/{accountId}/containers/{containerId}/variables";
  GTLRTagManagerQuery_AccountsContainersVariablesList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.accountId = accountId;
  query.containerId = containerId;
  query.expectedObjectClass = [GTLRTagManager_ListVariablesResponse class];
  query.loggingName = @"tagmanager.accounts.containers.variables.list";
  return query;
}

@end

@implementation GTLRTagManagerQuery_AccountsContainersVariablesUpdate

@dynamic accountId, containerId, fingerprint, variableId;

+ (instancetype)queryWithObject:(GTLRTagManager_Variable *)object
                      accountId:(NSString *)accountId
                    containerId:(NSString *)containerId
                     variableId:(NSString *)variableId {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[
    @"accountId", @"containerId", @"variableId"
  ];
  NSString *pathURITemplate = @"accounts/{accountId}/containers/{containerId}/variables/{variableId}";
  GTLRTagManagerQuery_AccountsContainersVariablesUpdate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PUT"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.accountId = accountId;
  query.containerId = containerId;
  query.variableId = variableId;
  query.expectedObjectClass = [GTLRTagManager_Variable class];
  query.loggingName = @"tagmanager.accounts.containers.variables.update";
  return query;
}

@end

@implementation GTLRTagManagerQuery_AccountsContainersVersionsCreate

@dynamic accountId, containerId;

+ (instancetype)queryWithObject:(GTLRTagManager_CreateContainerVersionRequestVersionOptions *)object
                      accountId:(NSString *)accountId
                    containerId:(NSString *)containerId {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[
    @"accountId", @"containerId"
  ];
  NSString *pathURITemplate = @"accounts/{accountId}/containers/{containerId}/versions";
  GTLRTagManagerQuery_AccountsContainersVersionsCreate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.accountId = accountId;
  query.containerId = containerId;
  query.expectedObjectClass = [GTLRTagManager_CreateContainerVersionResponse class];
  query.loggingName = @"tagmanager.accounts.containers.versions.create";
  return query;
}

@end

@implementation GTLRTagManagerQuery_AccountsContainersVersionsDelete

@dynamic accountId, containerId, containerVersionId;

+ (instancetype)queryWithAccountId:(NSString *)accountId
                       containerId:(NSString *)containerId
                containerVersionId:(NSString *)containerVersionId {
  NSArray *pathParams = @[
    @"accountId", @"containerId", @"containerVersionId"
  ];
  NSString *pathURITemplate = @"accounts/{accountId}/containers/{containerId}/versions/{containerVersionId}";
  GTLRTagManagerQuery_AccountsContainersVersionsDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.accountId = accountId;
  query.containerId = containerId;
  query.containerVersionId = containerVersionId;
  query.loggingName = @"tagmanager.accounts.containers.versions.delete";
  return query;
}

@end

@implementation GTLRTagManagerQuery_AccountsContainersVersionsGet

@dynamic accountId, containerId, containerVersionId;

+ (instancetype)queryWithAccountId:(NSString *)accountId
                       containerId:(NSString *)containerId
                containerVersionId:(NSString *)containerVersionId {
  NSArray *pathParams = @[
    @"accountId", @"containerId", @"containerVersionId"
  ];
  NSString *pathURITemplate = @"accounts/{accountId}/containers/{containerId}/versions/{containerVersionId}";
  GTLRTagManagerQuery_AccountsContainersVersionsGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.accountId = accountId;
  query.containerId = containerId;
  query.containerVersionId = containerVersionId;
  query.expectedObjectClass = [GTLRTagManager_ContainerVersion class];
  query.loggingName = @"tagmanager.accounts.containers.versions.get";
  return query;
}

@end

@implementation GTLRTagManagerQuery_AccountsContainersVersionsList

@dynamic accountId, containerId, headers, includeDeleted;

+ (instancetype)queryWithAccountId:(NSString *)accountId
                       containerId:(NSString *)containerId {
  NSArray *pathParams = @[
    @"accountId", @"containerId"
  ];
  NSString *pathURITemplate = @"accounts/{accountId}/containers/{containerId}/versions";
  GTLRTagManagerQuery_AccountsContainersVersionsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.accountId = accountId;
  query.containerId = containerId;
  query.expectedObjectClass = [GTLRTagManager_ListContainerVersionsResponse class];
  query.loggingName = @"tagmanager.accounts.containers.versions.list";
  return query;
}

@end

@implementation GTLRTagManagerQuery_AccountsContainersVersionsPublish

@dynamic accountId, containerId, containerVersionId, fingerprint;

+ (instancetype)queryWithAccountId:(NSString *)accountId
                       containerId:(NSString *)containerId
                containerVersionId:(NSString *)containerVersionId {
  NSArray *pathParams = @[
    @"accountId", @"containerId", @"containerVersionId"
  ];
  NSString *pathURITemplate = @"accounts/{accountId}/containers/{containerId}/versions/{containerVersionId}/publish";
  GTLRTagManagerQuery_AccountsContainersVersionsPublish *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.accountId = accountId;
  query.containerId = containerId;
  query.containerVersionId = containerVersionId;
  query.expectedObjectClass = [GTLRTagManager_PublishContainerVersionResponse class];
  query.loggingName = @"tagmanager.accounts.containers.versions.publish";
  return query;
}

@end

@implementation GTLRTagManagerQuery_AccountsContainersVersionsRestore

@dynamic accountId, containerId, containerVersionId;

+ (instancetype)queryWithAccountId:(NSString *)accountId
                       containerId:(NSString *)containerId
                containerVersionId:(NSString *)containerVersionId {
  NSArray *pathParams = @[
    @"accountId", @"containerId", @"containerVersionId"
  ];
  NSString *pathURITemplate = @"accounts/{accountId}/containers/{containerId}/versions/{containerVersionId}/restore";
  GTLRTagManagerQuery_AccountsContainersVersionsRestore *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.accountId = accountId;
  query.containerId = containerId;
  query.containerVersionId = containerVersionId;
  query.expectedObjectClass = [GTLRTagManager_ContainerVersion class];
  query.loggingName = @"tagmanager.accounts.containers.versions.restore";
  return query;
}

@end

@implementation GTLRTagManagerQuery_AccountsContainersVersionsUndelete

@dynamic accountId, containerId, containerVersionId;

+ (instancetype)queryWithAccountId:(NSString *)accountId
                       containerId:(NSString *)containerId
                containerVersionId:(NSString *)containerVersionId {
  NSArray *pathParams = @[
    @"accountId", @"containerId", @"containerVersionId"
  ];
  NSString *pathURITemplate = @"accounts/{accountId}/containers/{containerId}/versions/{containerVersionId}/undelete";
  GTLRTagManagerQuery_AccountsContainersVersionsUndelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.accountId = accountId;
  query.containerId = containerId;
  query.containerVersionId = containerVersionId;
  query.expectedObjectClass = [GTLRTagManager_ContainerVersion class];
  query.loggingName = @"tagmanager.accounts.containers.versions.undelete";
  return query;
}

@end

@implementation GTLRTagManagerQuery_AccountsContainersVersionsUpdate

@dynamic accountId, containerId, containerVersionId, fingerprint;

+ (instancetype)queryWithObject:(GTLRTagManager_ContainerVersion *)object
                      accountId:(NSString *)accountId
                    containerId:(NSString *)containerId
             containerVersionId:(NSString *)containerVersionId {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[
    @"accountId", @"containerId", @"containerVersionId"
  ];
  NSString *pathURITemplate = @"accounts/{accountId}/containers/{containerId}/versions/{containerVersionId}";
  GTLRTagManagerQuery_AccountsContainersVersionsUpdate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PUT"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.accountId = accountId;
  query.containerId = containerId;
  query.containerVersionId = containerVersionId;
  query.expectedObjectClass = [GTLRTagManager_ContainerVersion class];
  query.loggingName = @"tagmanager.accounts.containers.versions.update";
  return query;
}

@end

@implementation GTLRTagManagerQuery_AccountsGet

@dynamic accountId;

+ (instancetype)queryWithAccountId:(NSString *)accountId {
  NSArray *pathParams = @[ @"accountId" ];
  NSString *pathURITemplate = @"accounts/{accountId}";
  GTLRTagManagerQuery_AccountsGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.accountId = accountId;
  query.expectedObjectClass = [GTLRTagManager_Account class];
  query.loggingName = @"tagmanager.accounts.get";
  return query;
}

@end

@implementation GTLRTagManagerQuery_AccountsList

+ (instancetype)query {
  NSString *pathURITemplate = @"accounts";
  GTLRTagManagerQuery_AccountsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:nil];
  query.expectedObjectClass = [GTLRTagManager_ListAccountsResponse class];
  query.loggingName = @"tagmanager.accounts.list";
  return query;
}

@end

@implementation GTLRTagManagerQuery_AccountsPermissionsCreate

@dynamic accountId;

+ (instancetype)queryWithObject:(GTLRTagManager_UserAccess *)object
                      accountId:(NSString *)accountId {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[ @"accountId" ];
  NSString *pathURITemplate = @"accounts/{accountId}/permissions";
  GTLRTagManagerQuery_AccountsPermissionsCreate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.accountId = accountId;
  query.expectedObjectClass = [GTLRTagManager_UserAccess class];
  query.loggingName = @"tagmanager.accounts.permissions.create";
  return query;
}

@end

@implementation GTLRTagManagerQuery_AccountsPermissionsDelete

@dynamic accountId, permissionId;

+ (instancetype)queryWithAccountId:(NSString *)accountId
                      permissionId:(NSString *)permissionId {
  NSArray *pathParams = @[
    @"accountId", @"permissionId"
  ];
  NSString *pathURITemplate = @"accounts/{accountId}/permissions/{permissionId}";
  GTLRTagManagerQuery_AccountsPermissionsDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.accountId = accountId;
  query.permissionId = permissionId;
  query.loggingName = @"tagmanager.accounts.permissions.delete";
  return query;
}

@end

@implementation GTLRTagManagerQuery_AccountsPermissionsGet

@dynamic accountId, permissionId;

+ (instancetype)queryWithAccountId:(NSString *)accountId
                      permissionId:(NSString *)permissionId {
  NSArray *pathParams = @[
    @"accountId", @"permissionId"
  ];
  NSString *pathURITemplate = @"accounts/{accountId}/permissions/{permissionId}";
  GTLRTagManagerQuery_AccountsPermissionsGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.accountId = accountId;
  query.permissionId = permissionId;
  query.expectedObjectClass = [GTLRTagManager_UserAccess class];
  query.loggingName = @"tagmanager.accounts.permissions.get";
  return query;
}

@end

@implementation GTLRTagManagerQuery_AccountsPermissionsList

@dynamic accountId;

+ (instancetype)queryWithAccountId:(NSString *)accountId {
  NSArray *pathParams = @[ @"accountId" ];
  NSString *pathURITemplate = @"accounts/{accountId}/permissions";
  GTLRTagManagerQuery_AccountsPermissionsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.accountId = accountId;
  query.expectedObjectClass = [GTLRTagManager_ListAccountUsersResponse class];
  query.loggingName = @"tagmanager.accounts.permissions.list";
  return query;
}

@end

@implementation GTLRTagManagerQuery_AccountsPermissionsUpdate

@dynamic accountId, permissionId;

+ (instancetype)queryWithObject:(GTLRTagManager_UserAccess *)object
                      accountId:(NSString *)accountId
                   permissionId:(NSString *)permissionId {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[
    @"accountId", @"permissionId"
  ];
  NSString *pathURITemplate = @"accounts/{accountId}/permissions/{permissionId}";
  GTLRTagManagerQuery_AccountsPermissionsUpdate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PUT"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.accountId = accountId;
  query.permissionId = permissionId;
  query.expectedObjectClass = [GTLRTagManager_UserAccess class];
  query.loggingName = @"tagmanager.accounts.permissions.update";
  return query;
}

@end

@implementation GTLRTagManagerQuery_AccountsUpdate

@dynamic accountId, fingerprint;

+ (instancetype)queryWithObject:(GTLRTagManager_Account *)object
                      accountId:(NSString *)accountId {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[ @"accountId" ];
  NSString *pathURITemplate = @"accounts/{accountId}";
  GTLRTagManagerQuery_AccountsUpdate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PUT"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.accountId = accountId;
  query.expectedObjectClass = [GTLRTagManager_Account class];
  query.loggingName = @"tagmanager.accounts.update";
  return query;
}

@end
